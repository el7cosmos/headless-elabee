services:
  cache.backend.redis:
    class: Drupal\redis\Cache\CacheBackendFactory
    arguments: ['@redis.factory', '@cache_tags.invalidator.checksum', '@serialization.phpserialize']
  redis.factory:
    class: Drupal\redis\ClientFactory
  redis.lock.factory:
    class: Drupal\redis\Lock\LockFactory
    arguments: ['@redis.factory']
  redis.flood.factory:
    class: Drupal\redis\Flood\FloodFactory
    arguments: ['@redis.factory', '@request_stack']
  queue.redis_reliable:
    class: Drupal\redis\Queue\ReliableQueueRedisFactory
    arguments: ['@redis.factory', '@settings']
  queue.redis:
    class: Drupal\redis\Queue\QueueRedisFactory
    arguments: ['@redis.factory', '@settings']

  # Cache tag checksum backend. Used by redis and most other cache backend
  # to deal with cache tag invalidations.
  cache_tags.invalidator.checksum:
   class: Drupal\redis\Cache\RedisCacheTagsChecksum
   arguments: ['@redis.factory']
   tags:
     - { name: cache_tags_invalidator }

  # Replaces the default lock backend with a redis implementation.
  lock:
    class: Drupal\Core\Lock\LockBackendInterface
    factory: ['@redis.lock.factory', get]

  # Replaces the default persistent lock backend with a redis implementation.
  lock.persistent:
    class: Drupal\Core\Lock\LockBackendInterface
    factory: ['@redis.lock.factory', get]
    arguments: [true]

  # Replaces the default flood backend with a redis implementation.
  flood:
    class: Drupal\Core\Flood\FloodInterface
    factory: ['@redis.flood.factory', get]
